/******************************************************************************
 * This file was generated by langium-cli 3.0.0-next.e78aeba.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const PersonTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export interface Model extends AstNode {
    readonly $type: 'Model';
    persons: Array<Person>;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Person extends AstNode {
    readonly $container: Model;
    readonly $type: 'Person';
    name: string;
}

export const Person = 'Person';

export function isPerson(item: unknown): item is Person {
    return reflection.isInstance(item, Person);
}

export type PersonAstType = {
    Model: Model
    Person: Person
}

export class PersonAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Model', 'Person'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Model': {
                return {
                    name: 'Model',
                    properties: [
                        { name: 'persons', defaultValue: [] }
                    ]
                };
            }
            case 'Person': {
                return {
                    name: 'Person',
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new PersonAstReflection();
