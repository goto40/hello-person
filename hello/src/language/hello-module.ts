import { type Module, inject, LangiumGeneratedSharedCoreServices, ReferenceInfo, TypeMetaData } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { HelloGeneratedModule } from './generated/module.js';
import { HelloValidator, registerValidationChecks } from './hello-validator.js';
import { Person, PersonGeneratedModule, PersonModule, PersonServices } from 'person';
import { HelloScopeProvider } from './hello-scope.js';
import { HelloAstReflection, PersonFromOtherModel } from './generated/ast.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type HelloAddedServices = {
    validation: {
        HelloValidator: HelloValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type HelloServices = LangiumServices & HelloAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const HelloModule: Module<HelloServices, PartialLangiumServices & HelloAddedServices> = {
    references: {
        ScopeProvider: (services) => new HelloScopeProvider(services) 
    },
    validation: {
        HelloValidator: () => new HelloValidator()
    }
};

class CommonAstReflection extends HelloAstReflection {

    constructor() {
        super();
        console.log('CommonAstReflection::constructor');
    }

    override isInstance(node: unknown, type: string): boolean {
        const result = super.isInstance(node, type);
        console.log(`isInstance(%o, ${type}) -> %o`, node, result);
        return result;
    }

    override isSubtype(subtype: string, supertype: string): boolean {
        let result = super.isSubtype(subtype, supertype);
        if (subtype===Person && supertype===PersonFromOtherModel) result=true;
        if (subtype===PersonFromOtherModel && supertype===Person) result=true;
        console.log(`isSubtype(${subtype}, ${supertype}) -> %o`, result);
        return result;
    }
    override getAllSubTypes(type: string): string[] {
        const result = super.getAllSubTypes(type);
        console.log(`getAllSubTypes(${type}) -> %o`, result);
        return result;        
    }

    override getAllTypes(): string[] {
        const result = super.getAllTypes();
        result.push(Person);
        console.log('getAllTypes() -> %o', result);
        return result;
    }
    override getReferenceType(refInfo: ReferenceInfo): string {
        const result = super.getReferenceType(refInfo);
        console.log(`getReferenceType(${refInfo}) -> %o`, result);
        return result;
    }
    override getTypeMetaData(type: string): TypeMetaData {
        const result = super.getTypeMetaData(type);
        console.log(`getTypeMetaData(${type}) -> %o`, result);
        return result;
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        const result = super.computeIsSubtype(subtype, supertype);
        console.log(`computeIsSubtype(${subtype},${supertype}) -> %o`, result);
        return result;
    }

}

export const CommonSharedModule: Module<LangiumSharedServices, LangiumGeneratedSharedCoreServices> = {
    AstReflection: () => new CommonAstReflection()
};


/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createHelloServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Hello: HelloServices,
    Person: PersonServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        CommonSharedModule
    );
    const Hello = inject(
        createDefaultModule({ shared }),
        HelloGeneratedModule,
        HelloModule
    );
    const Person = inject(
        createDefaultModule({ shared }),
        PersonGeneratedModule,
        PersonModule
    );
    shared.ServiceRegistry.register(Hello);
    shared.ServiceRegistry.register(Person);
    registerValidationChecks(Hello);
    return { shared, Hello, Person };
}
